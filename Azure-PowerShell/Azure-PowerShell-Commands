# General
## To get information on what PowerShell you are using
$PSVersionTable
## To get the list of verbs you can use
get-verb
## To get the list of cmdlets you can use
get-command
## To get the noun of a command in regards to file
get-command -Noun File*

# Help
## To get help with PS
Get-Help
## To get help with cmdlets
Get-Help -Name <cmd you need help with>
## To get help on a command to what what else you can add to it.
<Cmd> -help
## Common flags to help with the help command
### To get longer list than standard response
-full
### To get standard list but with parameters
-Detailed
### To get only example of how to use the command
-examples
### To open a webpage for your command
-online
### To see a parameter's properties
-parameter

# Process
## To show list of all processes running on a system
get-process
## To view a certain process
get-process <process name>
## To show member table of certain process
Get-Process -Name <selected-process-name> | Get-Member
## To ask for certain things about a process to be shown (use get-member before this to list to use real names of columns to help filter)
Get-Process <process name> | select-object -property Id, Name, CPU
## To sort through the process output data using default properties first, if no properties exist, it tries to compare teh objects themselves
Get-Process | sort-object -Descending -Property Name

# Run files (terminal)
## To tell PS to run the script or file that's being called
. ./<filename>

# Variables
## To specify a variable so you don't have to keep writing it out
$<Variable-name> = <code or whatever>
## Working with Varibles: Quotation Marks and Interpolation
### To make something literal (You write is what you get) using single quotation makrks
Write-Host 'Here is $PI' # Prints Here is $PI
### To interpolate use double quotation marks
Write-Host "Here is `$PI and its value is $PI" # Prints Here is $PI and its value is 3.14 ALSO '$PI allows you to escape interpolation of first $PI; second instance, value is interpolated and written out.
### To use an expression wihtin double quotation marks you can use the $() construct
Write-Host "An expression $($PI + 1)" # Prints An expression 4.14

# Profiles
## To see profile types and paths associated with them
$Profile | Select-Object *
## To create a profile for the current user and the current host
New-item -Itemtype "File" -Value 'Write-host "Hello <replace with your name>, welcome back" -foregroundcolor Green ' -Path $Profile.CurrentUserCurrentHost -Force
# Write-host
## To print something
Write-host "This is what I want to say"

# Parameters
## How to declare a parameter
Param(<insert param1, insert param2>) # inside the parathensis is called a declaration
### To use a parameter decorator to require less typing or code (parameter decorator is Parameter[])
Param([Parameter(Mandatory)] $Path) New-item $Path Write-host "File created at $Path" # This will make '$Path' mandatory
### To make parameter mandatory and display a message (HelpMessage)
Param([Parameter(Mandatory, HelpMessage = "Please provide a valid path")] $Path) New-item $Path Write-host "File created at $Path"
### Assign a type to parameter
Param([string]$Path)





